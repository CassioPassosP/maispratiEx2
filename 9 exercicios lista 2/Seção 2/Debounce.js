// Importa a biblioteca prompt-sync para entrada no terminal (linha por linha)
const prompt = require('prompt-sync')();

// Fun√ß√£o debounce que adia a execu√ß√£o da fun√ß√£o fn at√© que o usu√°rio pare de cham√°-la por 'delay' milissegundos
function debounce(fn, delay) {
  let timeoutId; // Armazena o identificador do setTimeout

  // Retorna uma nova fun√ß√£o que pode ser chamada com argumentos
  return function (...args) {
    // Se o usu√°rio chamar de novo antes do tempo acabar, o timer anterior √© cancelado
    clearTimeout(timeoutId);

    // Inicia um novo timer; se n√£o for interrompido, executa a fun√ß√£o fn
    timeoutId = setTimeout(() => {
      fn.apply(this, args); // Executa a fun√ß√£o fn com os argumentos e contexto corretos
    }, delay);
  };
}

// Define a fun√ß√£o que ser√° executada ap√≥s o tempo de espera (delay)
const mostrarMensagem = debounce((texto) => {
  console.log(`\nüü¢ Executando fun√ß√£o final com o valor: "${texto}"\n`);
}, 2000); // Tempo de espera: 2000ms = 2 segundos

console.log("Digite algo (digite 'sair' para encerrar):");

// Loop principal para capturar entradas do usu√°rio
while (true) {
  const entrada = prompt(">>> "); // Solicita entrada do usu√°rio

  // Se o usu√°rio digitar 'sair', o loop √© encerrado
  if (entrada.toLowerCase() === 'sair') {
    console.log("Encerrando o programa...");
    break;
  }

  // Chama a fun√ß√£o com debounce: a execu√ß√£o real s√≥ ocorrer√° 2 segundos ap√≥s a √∫ltima digita√ß√£o
  mostrarMensagem(entrada);
}
